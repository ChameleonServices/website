@inject HttpClient Client
@inject IJSRuntime JS
@inject NavigationManager NavManager

@if (ImageSources.Count > 0)
{
    <MudCarousel Class="mud-width-full" id="chameleon-banner" Style="height: 100%; width: 100%" ShowArrows="false" ShowBullets="false" AutoCycle="true" TData="object">
        @foreach (var image in ImageSources)
        {
            <MudCarouselItem Transition="transition" Color="@Color.Primary">
                <div class="banner-slide" style="background-image: url('@image');"></div>
            </MudCarouselItem>
        }
    </MudCarousel>
}

<div id="banner-preload">
    @foreach (var img in ImageSources)
    {
        <img src="@img" />
    }
</div>

@code {
    public ICollection<Uri> ImageSources { get; set; }
    private Transition transition = Transition.Fade;

    public ChameleonBanner()
    {
        ImageSources = Array.Empty<Uri>();
    }

    protected override async Task OnInitializedAsync()
    {
        var data = await Client.GetFromJsonAsync<ICollection<string>>("banner.json") ?? Array.Empty<string>();
        await LoadImages(data);
    }

    async Task LoadImages(ICollection<string> relativeUrls)
    {

        ImageSources = relativeUrls.Select(x => new Uri($"{NavManager.BaseUri}/media/banner/{x}")).ToArray();
        StateHasChanged();
    }

    //void parseBannerImages(data) {
    //            this.images = [];

    //            var bannerImages = data.detail.response;
    //            if(!bannerImages) return;

    //            bannerImages.forEach(path => this.images.push(this.basePath + path));

    //            // Preload images.
    //            // If more than one image, try to load the first and second.
    //            // Otherwise, just load the first.
    //            switch(this.images.length) {
    //                case 0:
    //                    this.imagesAllLoaded = true;
    //                    break;

    //                case 1:
    //                    this.preloadImage(0);
    //                    this.imagesAllLoaded = true;

    //                case 2:
    //                    this.preloadImage(0);
    //                    this.preloadImage(1);
    //                    this.imagesAllLoaded = true;

    //                default:
    //                    this.preloadImage(0);
    //                    this.preloadImage(1);
    //                    break;
        //            }

    //            // If we have an image, set up the background
    //            if(this.images.length > 0) {
    //                this.maxImage = bannerImages.length - 1;
    //                let banner = this.shadowRoot.querySelector("#banner-background");
    //                banner.style.backgroundImage = "url('" + this.images[0] + "')";
        //            }

    //            if(this.images.length > 1)
    //                setInterval(this.changeImage.bind(this), this.transitionTime * 1000);
    //        }

    //        preloadImage(index) {
    //            if(this.cached < index + 1) {
    //                let preload = this.shadowRoot.querySelector("#banner-preload");
    //                preload.style.backgroundImage = `url("${this.images[index]}")`;
    //                this.cached++;
    //            }
    //        }

    //        changeImage() {
    //            this.currentImage++;
    //            if(this.currentImage > this.maxImage) {
    //                this.currentImage = 0;
    //                this.imagesAllLoaded = true;
        //            }

    //            if(!this.imagesAllLoaded) {
    //                // Preload next image in the series
    //                this.preloadImage(this.currentImage + 1);
        //            }

    //            let banner = this.shadowRoot.querySelector("#banner-background");
    //            banner.style.backgroundImage = "url('" + this.images[this.currentImage] + "')";
    //        }
}
